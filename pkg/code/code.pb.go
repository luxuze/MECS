// Code generated by protoc-gen-go. DO NOT EDIT.
// source: code.proto

package code

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Code struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Code) Reset()         { *m = Code{} }
func (m *Code) String() string { return proto.CompactTextString(m) }
func (*Code) ProtoMessage()    {}
func (*Code) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9b0151640170c3, []int{0}
}

func (m *Code) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Code.Unmarshal(m, b)
}
func (m *Code) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Code.Marshal(b, m, deterministic)
}
func (m *Code) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Code.Merge(m, src)
}
func (m *Code) XXX_Size() int {
	return xxx_messageInfo_Code.Size(m)
}
func (m *Code) XXX_DiscardUnknown() {
	xxx_messageInfo_Code.DiscardUnknown(m)
}

var xxx_messageInfo_Code proto.InternalMessageInfo

func (m *Code) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type Response struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9b0151640170c3, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*Code)(nil), "code.Code")
	proto.RegisterType((*Response)(nil), "code.Response")
}

func init() { proto.RegisterFile("code.proto", fileDescriptor_6e9b0151640170c3) }

var fileDescriptor_6e9b0151640170c3 = []byte{
	// 124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x4f, 0x49,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xa4, 0xb8, 0x58, 0x9c, 0xf3,
	0x53, 0x52, 0x85, 0x84, 0xb8, 0xc0, 0x7c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x88, 0x9c,
	0x12, 0x17, 0x47, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x18, 0x17, 0x5b, 0x51,
	0x6a, 0x71, 0x69, 0x4e, 0x09, 0x54, 0x05, 0x94, 0x67, 0x64, 0xc0, 0xc5, 0xe2, 0x9b, 0x5a, 0x9c,
	0x2c, 0xa4, 0x01, 0x52, 0x9b, 0x9e, 0x59, 0x5c, 0x92, 0x5a, 0x24, 0xc4, 0xa5, 0x07, 0xb6, 0x06,
	0x64, 0xae, 0x14, 0x1f, 0x84, 0x0d, 0x33, 0x47, 0x89, 0x21, 0x89, 0x0d, 0x6c, 0xbd, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x0b, 0xf9, 0x72, 0xa4, 0x8c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MescClient is the client API for Mesc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MescClient interface {
	Register(ctx context.Context, in *Code, opts ...grpc.CallOption) (*Response, error)
}

type mescClient struct {
	cc *grpc.ClientConn
}

func NewMescClient(cc *grpc.ClientConn) MescClient {
	return &mescClient{cc}
}

func (c *mescClient) Register(ctx context.Context, in *Code, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/code.Mesc/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MescServer is the server API for Mesc service.
type MescServer interface {
	Register(context.Context, *Code) (*Response, error)
}

// UnimplementedMescServer can be embedded to have forward compatible implementations.
type UnimplementedMescServer struct {
}

func (*UnimplementedMescServer) Register(ctx context.Context, req *Code) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterMescServer(s *grpc.Server, srv MescServer) {
	s.RegisterService(&_Mesc_serviceDesc, srv)
}

func _Mesc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Code)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MescServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/code.Mesc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MescServer).Register(ctx, req.(*Code))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mesc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "code.Mesc",
	HandlerType: (*MescServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Mesc_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "code.proto",
}
